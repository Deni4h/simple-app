pipeline {
    agent any

    parameters {
        string(name: 'GIT_TAG', defaultValue: '', description: 'Masukkan tag Git, contoh: v1.0.0')
    }

    environment {
        DOCKERHUB_USER = "denidkr24" 
        IMAGE_NAME = "${DOCKERHUB_USER}/simple-app"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    if (params.GIT_TAG == '') {
                        error "‚ùå Parameter GIT_TAG tidak boleh kosong"
                    }

                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "refs/tags/${params.GIT_TAG}"]],
                        userRemoteConfigs: [[
                            url: 'git@github.com:Deni4h/simple-app.git',
                            credentialsId: 'git-deni4h' // Ganti dengan ID SSH Key kamu di Jenkins
                        ]]
                    ])
                    echo "‚úÖ Clone berdasarkan tag ${params.GIT_TAG} berhasil"
                }
            }
        }

        stage('Set Image Tag') {
            steps {
                script {
                    IMAGE_TAG = "v${BUILD_NUMBER}"
                    IMAGE_FULL_NAME = "${IMAGE_NAME}:${IMAGE_TAG}"
                    echo "üì¶ Image akan dibuat: ${IMAGE_FULL_NAME}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_FULL_NAME}")
                    echo "üî® Build image Docker berhasil"
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('', 'docker-hub-credentials') {
                        echo "üîë Login ke Docker Hub berhasil"
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('', 'docker-hub-credentials') {
                        docker.image("${IMAGE_FULL_NAME}").push()
                        echo "‚òÅÔ∏è Push ke Docker Hub berhasil"
                    }
                }
            }
        }

        stage('Run Container') {
            steps {
                script {
                    sh 'docker rm -f myapp-container || true'
                    sh "docker run -d -p 7979:80 --name myapp-container ${IMAGE_FULL_NAME}"
                    echo "üöÄ Container berjalan di port 7979"
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Build dan Deploy Berhasil: ${IMAGE_FULL_NAME}"
        }
        failure {
            echo "‚ùå Build gagal"
        }
    }
}
